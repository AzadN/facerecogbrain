{"version":3,"sources":["components/navigation/Navigation.js","components/logo/Logo.js","components/ImageLinkInput/ImageLinkInput.js","components/FaceRecognition/FaceRecognition.js","components/SignIn/Signin.js","components/register/Register.js","components/rank/Rank.js","App.js","serviceWorker.js","index.js","components/logo/brain.png"],"names":["Navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","Logo","options","max","height","width","paddingTop","src","brain","alt","ImageLinkInput","onInputChange","onButtonSubmit","type","onChange","FaceRecognition","imageURL","box","id","heigh","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Signin","props","onEmailChange","event","setState","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","fetch","method","headers","body","JSON","stringify","email","state","password","then","response","json","user","loadUser","this","htmlFor","name","React","Component","Register","onNameChange","Rank","entries","particlesOptions","particles","number","density","enable","value_area","initialState","input","route","isSignedin","joined","Date","App","data","calculateFaceLocation","clarifAIFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","count","Object","assign","catch","console","log","err","params","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.d2a14ae2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navigation = ({onRouteChange, isSignedIn}) =>{\r\n\tif(isSignedIn){\r\n\t\treturn(\r\n\t\t\t<nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n\t\t\t\t<p onClick={()=>onRouteChange('signout')} className='f3 link dim black underline pa3 pointer'>Sign Out</p>\r\n\t\t\t</nav>\r\n\t\t);\r\n\t} else {\r\n\t\treturn(\r\n\t\t\t<nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n\t\t\t\t<p onClick={()=>onRouteChange('signin')} className='f3 link dim black underline pa3 pointer'>Sign In</p>\r\n\t\t\t\t<p onClick={()=>onRouteChange('register')} className='f3 link dim black underline pa3 pointer'>Register</p>\r\n\t\t\t</nav>\r\n\t\t);\r\n\t} \r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport './Logo.css';\r\nimport brain from './brain.png'; \r\n\r\nconst Logo = () =>{\r\n\treturn(\r\n\t\t<div className='ma4 mt0'>\r\n\t\t\t<Tilt className=\"Tilt br2 shadow-2\" options={{ max : 55 }} style={{ height: 150, width: 150 }} >\r\n\t\t\t <div className=\"Tilt-inner pa3\"> <img style={{paddingTop: '5px'}} src={brain} alt='logo' /> </div>\r\n\t\t\t</Tilt>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkInput.css';\r\n\r\nconst ImageLinkInput = ({onInputChange, onButtonSubmit}) =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<p className='f3'>\r\n\t\t\t\t{'This Magic Brain will detect faces in your pictures. Try it out!!'}\r\n\t\t\t</p>\r\n\t\t\t<div className='center'>\r\n\t\t        <div className='form center pa4 br3 shadow-5'>\r\n\t\t          <input className='f4 pa2 w-70 center' type='tex' onChange={onInputChange}/>\r\n\t\t          <button className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple' \r\n\t\t          onClick={onButtonSubmit}>Detect</button>\r\n\t\t        </div>\r\n\t\t    </div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ImageLinkInput;","import React from 'react';\r\nimport './FaceRecognition.css'\r\n\r\nconst FaceRecognition = ({imageURL, box}) =>{\r\n\treturn(\r\n\t\t<div className='center ma'>\r\n\t      <div className='absolute mt2'>\r\n\t        <img id='inputimage' alt='' src={imageURL } width='500px' heigh='auto'/>\r\n\t        <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\r\n\t      </div>\r\n    \t</div>\r\n\t);\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\nclass Signin extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t  signInEmail: '',\r\n\t\t  signInPassword: ''\r\n\t\t}\r\n\t}\r\n\r\n\tonEmailChange = (event) => {\r\n\t\tthis.setState({signInEmail: event.target.value})\r\n\t}\r\n\r\n\tonPasswordChange = (event) => {\r\n\t\tthis.setState({signInPassword: event.target.value})\r\n\t}\r\n\r\n  onSubmitSignIn = () => {\r\n    fetch('http://localhost:3001/signin', {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        email: this.state.signInEmail,\r\n        password: this.state.signInPassword\r\n      })\r\n    })\r\n\t\t.then(response => response.json())\r\n\t\t.then(user => {\r\n\t\tif(user.id){\r\n\t\t  this.props.loadUser(user);\r\n\t\t  this.props.onRouteChange('home');\r\n\t\t}\r\n\t})\r\n  }\r\n\r\n\r\n\trender(){\r\n\t\tconst {onRouteChange}=this.props;\r\n\t\treturn(\r\n\t\t\t<article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw7 shadow-5 center\">\r\n\t\t\t\t<main className=\"pa4 black-80\">\r\n\t\t\t\t  <div className=\"f3 measure-narrow\">\r\n\t\t\t\t    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n\t\t\t\t      <legend className=\"f2 fw6 ph0 mh0\">Sign In</legend>\r\n\t\t\t\t      <div className=\"mt3\">\r\n\t\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n\t\t\t\t        <input \r\n\t\t\t\t\t        className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n\t\t\t\t\t        type=\"email\" name=\"email-address\"  id=\"email-address\" \r\n\t\t\t\t\t        onChange={this.onEmailChange} \r\n\t\t\t\t        />\r\n\t\t\t\t      </div>\r\n\t\t\t\t      <div className=\"mv3\">\r\n\t\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n\t\t\t\t        <input \r\n\t\t\t\t\t        className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n\t\t\t\t\t        type=\"password\" name=\"password\"  id=\"password\" \r\n\t\t\t\t\t        onChange={this.onPasswordChange}\r\n\t\t\t\t        />\r\n\t\t\t\t      </div>\r\n\t\t\t\t      {/*<label className=\"pa0 ma0 lh-copy f6 pointer\"><input type=\"checkbox\" /> Remember me</label>*/}\r\n\t\t\t\t    </fieldset>\r\n\t\t\t\t    <div className=\"\">\r\n\t\t\t\t      <input \r\n\t\t\t\t      onClick={this.onSubmitSignIn}\r\n\t\t\t\t      className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" \r\n\t\t\t\t      type=\"submit\" \r\n\t\t\t\t      value=\"Sign in\" />\r\n\t\t\t\t    </div>\r\n\t\t\t\t    <div className=\"lh-copy mt3\">\r\n\t\t\t\t      <p onClick={()=>onRouteChange('register')} className=\"f6 link dim black db pointer\">Register</p>\r\n\t\t\t\t      {/*<a href=\"#0\" className=\"f6 link dim black db\">Forgot your password?</a>*/}\r\n\t\t\t\t    </div>\r\n\t\t\t\t  </div>\r\n\t\t\t\t</main>\r\n\t\t\t</article>\t\r\n\t\t\t);\r\n\t\t}\r\n}\r\n\r\n\r\nexport default Signin;","import React from 'react';\r\n\r\nclass Register extends React.Component{\r\n\r\n\tconstructor(props)  {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t  email: '',\r\n\t\t  password: '',\r\n\t\t  name: ''\r\n\t\t}\r\n\t}\r\n\r\n\tonNameChange = (event) => {\r\n\t\tthis.setState({name: event.target.value})\r\n\t}\r\n\r\n\tonEmailChange = (event) => {\r\n\t\tthis.setState({email: event.target.value})\r\n\t}\r\n\r\n\tonPasswordChange = (event) => {\r\n\t\tthis.setState({password: event.target.value})\r\n\t}\r\n\r\n\tonSubmitSignIn = () => {\r\n\t\tfetch('http://localhost:3001/register', {\r\n\t\t  method: 'post',\r\n\t\t  headers: {'Content-Type': 'application/json'},\r\n\t\t  body: JSON.stringify({\r\n\t\t    email: this.state.email,\r\n\t\t    password: this.state.password,\r\n\t\t    name: this.state.name\r\n\t\t  })\r\n\t\t})\r\n\t\t.then(response => response.json())\r\n\t\t.then(user=>{\r\n\t\t\tif(user.id){ //Input Validation\r\n\t\t\t\tthis.props.loadUser(user);\r\n\t\t\t\tthis.props.onRouteChange('home');\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t<article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw7 shadow-5 center\">\r\n\t\t\t<main className=\"pa4 black-80\">\r\n\t\t\t  <div className=\"f3 measure-narrow\">\r\n\t\t\t    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n\t\t\t      <legend className=\"f2 fw6 ph0 mh0\">Register</legend>\r\n\t\t\t      <div className=\"mt3\">\r\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n\t\t\t        <input \r\n\t\t\t\t        className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n\t\t\t\t        type=\"text\" name=\"name\"  id=\"name\" \r\n\t\t\t\t        onChange={this.onNameChange}\r\n\t\t\t\t        />\r\n\t\t\t      </div>\r\n\t\t\t      <div className=\"mt3\">\r\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n\t\t\t        <input\r\n\t\t\t\t        className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n\t\t\t\t        type=\"email\" name=\"email-address\"  id=\"email-address\"\r\n\t\t\t\t        onChange={this.onEmailChange} \r\n\t\t\t\t        />\r\n\t\t\t      </div>\r\n\t\t\t      <div className=\"mv3\">\r\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n\t\t\t        <input \r\n\t\t\t        \tclassName=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n\t\t\t\t        type=\"password\" name=\"password\"  id=\"password\" \r\n\t\t\t\t        onChange={this.onPasswordChange}\r\n\t\t\t        />\r\n\t\t\t      </div>\r\n\t\t\t      {/*<label className=\"pa0 ma0 lh-copy f6 pointer\"><input type=\"checkbox\" /> Remember me</label>*/}\r\n\t\t\t    </fieldset>\r\n\t\t\t    <div className=\"\">\r\n\t\t\t      <input \r\n\t\t\t      onClick={this.onSubmitSignIn}\r\n\t\t\t      className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" \r\n\t\t\t      type=\"submit\" \r\n\t\t\t      value=\"Register\" />\r\n\t\t\t    </div>\r\n\t\t\t  </div>\r\n\t\t\t</main>\r\n\t\t</article>\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\n\r\nconst Rank = ({name, entries}) => { \r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<div className='white f3'>\r\n\t\t\t\t{`${name}, your current detection count is...`}\r\n\t\t\t</div>\r\n\t\t\t<div className='white f1'>\r\n\t\t\t\t{entries}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Rank;","import React, {Component} from 'react';\nimport './App.css';\nimport Navigation from './components/navigation/Navigation';\nimport Logo from './components/logo/Logo';\nimport ImageLinkInput from './components/ImageLinkInput/ImageLinkInput';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/SignIn/Signin';\nimport Register from './components/register/Register';\nimport Rank from './components/rank/Rank';\nimport Particles from 'react-particles-js';\n\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 70,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\n\n//Introduced since an existing user's image detection page would be accessible to a new logged in user\n//Hence, clearing the state of App is essential upon every login.\nconst initialState = {\n  input: '',\n  imageURL: '',\n  box: {},\n  route: 'signin',\n  isSignedin: false,\n  user:{\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: new Date()\n  }\n}\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state=initialState;\n  }\n\n  loadUser=(data)=>{\n    this.setState({user:{\n        id: data.id,\n        name: data.name,\n        email: data.email,\n        entries: data.entries,\n        joined: data.joined\n    }})\n  }\n\n  /*componentDidMount(){\n    fetch('http://localhost:3001/')\n      .then(response=>response.json())\n      .then(console.log)\n  }*/\n\n  calculateFaceLocation=(data)=>{\n    const clarifAIFace=data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image=document.getElementById('inputimage');\n    const width=Number(image.width);\n    const height=Number(image.height);\n    return {\n      leftCol: clarifAIFace.left_col * width,\n      topRow: clarifAIFace.top_row * height,\n      rightCol: width - (clarifAIFace.right_col * width),\n      bottomRow: height - (clarifAIFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({box: box});\n  }\n\n  onInputChange=(event)=>{\n    this.setState({input: event.target.value});\n  }\n\n  onRouteChange=(route)=>{\n    if(route==='signout')\n      this.setState(initialState); //Clear state upon signout\n    else if(route==='home')\n      this.setState({isSignedin: 'true'});\n    this.setState({route: route});\n  }\n\n  onButtonSubmit=()=>{\n    this.setState({imageURL: this.state.input});\n      fetch('http://localhost:3001/imageurl',{\n            method: 'post',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n              input: this.state.input\n            })\n          })\n      .then(response=>response.json())\n      .then(response  => {\n        if(response)\n        {\n          fetch('http://localhost:3001/image',{\n            method: 'put',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          })\n            .then(response => response.json())\n            .then(count => {\n              this.setState(Object.assign(this.state.user, { entries: count}))\n            })\n            .catch(console.log) //Error handling is imp\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response))\n      })\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    const {isSignedin, imageURL, route, box}=this.state;\n    return (\n      <div className=\"App\">\n        <Particles className='particles'\n          params={particlesOptions} \n        />\n        <Navigation isSignedIn={isSignedin} onRouteChange={this.onRouteChange}/>\n        {route==='home' ?\n          <div>\n            <Logo />\n            <Rank \n                name={this.state.user.name}\n                entries={this.state.user.entries}\n            />\n            <ImageLinkInput onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\n            <FaceRecognition box={box} imageURL={imageURL}/>\n          </div>\n          :(\n            route==='signin' ?\n            <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n            : <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n\n          )\n      }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/brain.89bd9705.png\";"],"sourceRoot":""}